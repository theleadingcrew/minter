{"version":3,"sources":["interact.js","Minter.js","App.js","reportWebVitals.js","index.js"],"names":["require","config","contractAddress","process","contractABI","web3","createAlchemyWeb3","connectWallet","a","window","ethereum","request","method","addressArray","obj","status","address","message","target","href","getCurrentWalletConnected","length","mint","mintAmount","trim","success","Object","eth","Contract","contract","transactionParameters","to","from","selectedAddress","value","Number","toString","data","methods","presaleMint","encodeABI","params","txHash","Minter","props","useState","walletAddress","setWallet","setStatus","setMintAmount","addWalletListener","on","accounts","useEffect","connectWalletPressed","walletResponse","onMintPressed","className","id","onClick","String","substring","type","placeholder","onChange","event","style","color","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a48023ef.chunk.js","sourcesContent":["require(\"dotenv\").config();\r\nconst alchemyKey = process.env.REACT_APP_ALCHEMY_KEY;\r\nconst contractAddress = process.env.REACT_APP_CONTRACT_ADDRESS;\r\nconst contractABI = require(\"./contract-abi.json\");\r\nconst { createAlchemyWeb3 } = require(\"@alch/alchemy-web3\");\r\nconst web3 = createAlchemyWeb3(alchemyKey);\r\n\r\nexport const connectWallet = async () => {\r\n  if (window.ethereum) {\r\n    try {\r\n      const addressArray = await window.ethereum.request({\r\n        method: \"eth_requestAccounts\",\r\n      });\r\n      const obj = {\r\n        status: \"👆🏽 Write a message in the text-field above.\",\r\n        address: addressArray[0],\r\n      };\r\n      return obj;\r\n    } catch (err) {\r\n      return {\r\n        address: \"\",\r\n        status: \"😥 \" + err.message,\r\n      };\r\n    }\r\n  } else {\r\n    return {\r\n      address: \"\",\r\n      status: (\r\n        <span>\r\n          <p>\r\n            {\" \"}\r\n            🦊{\" \"}\r\n            <a target=\"_blank\" href={`https://metamask.io/download.html`}>\r\n              You must install Metamask, a virtual Ethereum wallet, in your\r\n              browser.\r\n            </a>\r\n          </p>\r\n        </span>\r\n      ),\r\n    };\r\n  }\r\n};\r\n\r\nexport const getCurrentWalletConnected = async () => {\r\n  if (window.ethereum) {\r\n    try {\r\n      const addressArray = await window.ethereum.request({\r\n        method: \"eth_accounts\",\r\n      });\r\n      if (addressArray.length > 0) {\r\n        return {\r\n          address: addressArray[0],\r\n          status: \"👆🏽 Write a message in the text-field above.\",\r\n        };\r\n      } else {\r\n        return {\r\n          address: \"\",\r\n          status: \"🦊 Connect to Metamask using the top right button.\",\r\n        };\r\n      }\r\n    } catch (err) {\r\n      return {\r\n        address: \"\",\r\n        status: \"😥 \" + err.message,\r\n      };\r\n    }\r\n  } else {\r\n    return {\r\n      address: \"\",\r\n      status: (\r\n        <span>\r\n          <p>\r\n            {\" \"}\r\n            🦊{\" \"}\r\n            <a target=\"_blank\" href={`https://metamask.io/download.html`}>\r\n              You must install Metamask, a virtual Ethereum wallet, in your\r\n              browser.\r\n            </a>\r\n          </p>\r\n        </span>\r\n      ),\r\n    };\r\n  }\r\n};\r\n\r\nasync function loadContract() {\r\n  return new web3.eth.Contract(contractABI, contractAddress);\r\n}\r\n\r\nexport const mint = async (mintAmount) => {\r\n\tif (mintAmount.trim() == \"\") {\r\n\t  return {\r\n\t\tsuccess: false,\r\n\t\tstatus: \"❗Please make sure all fields are completed before minting.\",\r\n\t  };\r\n\t}\r\n\r\n\t//make metadata\r\n\tconst metadata = new Object();\r\n\tmetadata.mintAmount = mintAmount;\r\n\r\n\twindow.contract = await new web3.eth.Contract(contractABI, contractAddress);\r\n\r\n\tconst transactionParameters = {\r\n\t  to: contractAddress, // Required except during contract publications.\r\n\t  from: window.ethereum.selectedAddress, // must match user's active address.\r\n\t  value: (Number(6e16)* mintAmount).toString(16),\r\n\t  data: window.contract.methods\r\n\t\t// .publicMint(mintAmount)\r\n\t\t.presaleMint(mintAmount)\r\n\t\t.encodeABI(),\r\n\t};\r\n\r\n  try {\r\n    const txHash = await window.ethereum.request({\r\n      method: \"eth_sendTransaction\",\r\n      params: [transactionParameters],\r\n    });\r\n    return {\r\n      success: true,\r\n      status:\r\n        \"✅ Check out your transaction on Etherscan: https://rinkeby.etherscan.io/tx/\" +\r\n        txHash,\r\n    };\r\n  } catch (error) {\r\n    return {\r\n      success: false,\r\n      status: \"😥 Something went wrong: \" + error.message,\r\n    };\r\n  }\r\n};\r\n","import { useEffect, useState } from \"react\";\r\nimport {\r\n\tconnectWallet,\r\n\tgetCurrentWalletConnected,\r\n\tmint,\r\n} from \"./interact.js\";\r\n\r\nrequire(\"dotenv\").config();\r\n\r\nconst Minter = (props) => {\r\n  const [walletAddress, setWallet] = useState(\"\");\r\n  const [status, setStatus] = useState(\"\");\r\n\r\n  const [mintAmount, setMintAmount] = useState(\"\");\r\n\r\n  useEffect(async () => {\r\n    const { address, status } = await getCurrentWalletConnected();\r\n\r\n    setWallet(address);\r\n    setStatus(status);\r\n\r\n    addWalletListener();\r\n  }, []);\r\n\r\n  function addWalletListener() {\r\n    if (window.ethereum) {\r\n      window.ethereum.on(\"accountsChanged\", (accounts) => {\r\n        if (accounts.length > 0) {\r\n          setWallet(accounts[0]);\r\n          setStatus(\"👆🏽 Write a message in the text-field above.\");\r\n        } else {\r\n          setWallet(\"\");\r\n          setStatus(\"🦊 Connect to Metamask using the top right button.\");\r\n        }\r\n      });\r\n    } else {\r\n      setStatus(\r\n        <p>\r\n          {\" \"}\r\n          🦊{\" \"}\r\n          <a target=\"_blank\" href={`https://metamask.io/download.html`}>\r\n            You must install Metamask, a virtual Ethereum wallet, in your\r\n            browser.\r\n          </a>\r\n        </p>\r\n      );\r\n    }\r\n  }\r\n\r\n  const connectWalletPressed = async () => {\r\n    const walletResponse = await connectWallet();\r\n    setStatus(walletResponse.status);\r\n    setWallet(walletResponse.address);\r\n  };\r\n\r\n  const onMintPressed = async () => {\r\n    const { success, status } = await mint(mintAmount);\r\n    setStatus(status);\r\n    if (success) {\r\n      setMintAmount(\"\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"Minter\">\r\n      <button id=\"walletButton\" onClick={connectWalletPressed}>\r\n        {walletAddress.length > 0 ? (\r\n          \"Connected: \" +\r\n          String(walletAddress).substring(0, 6) +\r\n          \"...\" +\r\n          String(walletAddress).substring(38)\r\n        ) : (\r\n          <span>Connect Wallet</span>\r\n        )}\r\n      </button>\r\n\r\n      <br></br>\r\n      {\"Contract address: \"} <p>{process.env.REACT_APP_CONTRACT_ADDRESS}</p>\r\n\r\n      <h1 id=\"title\">The Leading Crew NFT Minter</h1>\r\n      <p>Enter the amount of NFTs you wish to mint and press \"Mint\"</p>\r\n      <form>\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Quantity: (1 to 6 max)\"\r\n          onChange={(event) => setMintAmount(event.target.value)}\r\n        />\r\n      </form>\r\n      <button id=\"mintButton\" onClick={onMintPressed}>\r\n        Mint\r\n      </button>\r\n      <p id=\"status\" style={{ color: \"red\" }}>\r\n        {status}\r\n      </p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Minter;","import './App.css';\r\nimport Minter from './Minter'\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Minter></Minter>\r\n      \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}