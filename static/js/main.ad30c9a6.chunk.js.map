{"version":3,"sources":["interact.js","img/promogif3.gif","img/tlc_logo_black.png","App.js","reportWebVitals.js","index.js"],"names":["require","config","contractAddress","process","contractABI","web3","createAlchemyWeb3","connectWallet","a","window","ethereum","request","method","addressArray","obj","status","address","message","target","href","getCurrentWalletConnected","length","mint","mintAmount","trim","success","eth","Contract","contract","transactionParameters","to","from","selectedAddress","value","Number","toString","data","methods","publicMint","encodeABI","params","txHash","App","useState","walletAddress","setWallet","setStatus","setMintAmount","addWalletListener","on","accounts","useEffect","connectWalletPressed","walletResponse","onMintPressed","className","id","String","substring","src","logo","width","height","gif","alt","type","placeholder","onChange","event","onClick","style","color","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ad30c9a6.chunk.js","sourcesContent":["require(\"dotenv\").config();\r\n\r\nconst alchemyKey = process.env.REACT_APP_ALCHEMY_KEY;\r\nconst contractAddress = process.env.REACT_APP_CONTRACT_ADDRESS;\r\nconst contractABI = require(\"./contract-abi.json\");\r\nconst { createAlchemyWeb3 } = require(\"@alch/alchemy-web3\");\r\nconst web3 = createAlchemyWeb3(alchemyKey);\r\n\r\nexport const connectWallet = async () => {\r\n\tif (window.ethereum) {\r\n\t\ttry {\r\n\t\t\tconst addressArray = await window.ethereum.request({\r\n\t\t\t\tmethod: \"eth_requestAccounts\",\r\n\t\t\t});\r\n\t\t\tconst obj = {\r\n\t\t\t\tstatus: \"Check that you are connected to the Ethereum Mainnet.\",\r\n\t\t\t\taddress: addressArray[0],\r\n\t\t\t};\r\n\t\t\treturn obj;\r\n\t\t} catch (err) {\r\n\t\t\treturn {\r\n\t\t\t\taddress: \"\",\r\n\t\t\t\tstatus: \"😥 \" + err.message,\r\n\t\t\t};\r\n\t\t}\r\n\t} else {\r\n\t\treturn {\r\n\t\t\taddress: \"\",\r\n\t\t\tstatus: (\r\n\t\t\t\t<span>\r\n\t\t\t\t<p>\r\n\t\t\t\t\t{\" \"}\r\n\t\t\t\t\t🦊{\" \"}\r\n\t\t\t\t\t<a target=\"_blank\" href={`https://metamask.io/download.html`}>\r\n\t\t\t\t\tYou must install Metamask, a virtual Ethereum wallet, in your\r\n\t\t\t\t\tbrowser.\r\n\t\t\t\t\t</a>\r\n\t\t\t\t</p>\r\n\t\t\t\t</span>\r\n\t\t\t),\r\n\t\t};\r\n\t}\r\n};\r\n\r\nexport const getCurrentWalletConnected = async () => {\r\n\tif (window.ethereum) {\r\n\t\ttry {\r\n\t\t\tconst addressArray = await window.ethereum.request({\r\n\t\t\t\tmethod: \"eth_accounts\",\r\n\t\t\t});\r\n\t\t\tif (addressArray.length > 0) {\r\n\t\t\t\treturn {\r\n\t\t\t\taddress: addressArray[0],\r\n\t\t\t\tstatus: \"Check that you are connected to the Ethereum Mainnet.\",\r\n\t\t\t\t};\r\n\t\t\t} else {\r\n\t\t\t\treturn {\r\n\t\t\t\taddress: \"\",\r\n\t\t\t\tstatus: \"🦊 Connect to Metamask using the top right button.\",\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t} catch (err) {\r\n\t\t\treturn {\r\n\t\t\t\taddress: \"\",\r\n\t\t\t\tstatus: \"😥 \" + err.message,\r\n\t\t\t};\r\n\t\t}\r\n\t} else {\r\n\t\treturn {\r\n\t\t\taddress: \"\",\r\n\t\t\tstatus: (\r\n\t\t\t\t<span>\r\n\t\t\t\t<p>\r\n\t\t\t\t\t{\" \"}\r\n\t\t\t\t\t🦊{\" \"}\r\n\t\t\t\t\t<a target=\"_blank\" href={`https://metamask.io/download.html`}>\r\n\t\t\t\t\tYou must install Metamask, a virtual Ethereum wallet, in your\r\n\t\t\t\t\tbrowser.\r\n\t\t\t\t\t</a>\r\n\t\t\t\t</p>\r\n\t\t\t\t</span>\r\n\t\t\t),\r\n\t\t};\r\n\t}\r\n};\r\n\r\nexport const mint = async (mintAmount) => {\r\n\tif (mintAmount.trim() == \"\") {\r\n\t\treturn {\r\n\t\t\tsuccess: false,\r\n\t\t\tstatus: \"❗Please make sure all fields are completed before minting.\",\r\n\t\t};\r\n\t}\r\n\tif (mintAmount > 6) {\r\n\t\treturn {\r\n\t\tsuccess: false,\r\n\t\tstatus: \"You can only mint a maximum of 6 NFTs.\",\r\n\t\t};\r\n\t}\r\n\r\n\twindow.contract = await new web3.eth.Contract(contractABI, contractAddress);\r\n\r\n\tconst transactionParameters = {\r\n\tto: contractAddress, // Required except during contract publications.\r\n\tfrom: window.ethereum.selectedAddress, // must match user's active address.\r\n\tvalue: (Number(6e16)* mintAmount).toString(16),\r\n\tdata: window.contract.methods\r\n\t\t.publicMint(mintAmount)\r\n\t\t// .presaleMint(mintAmount)\r\n\t\t.encodeABI(),\r\n\t};\r\n\r\n\ttry {\r\n\t\tconst txHash = await window.ethereum.request({\r\n\t\tmethod: \"eth_sendTransaction\",\r\n\t\tparams: [transactionParameters],\r\n\t\t});\r\n\t\treturn {\r\n\t\tsuccess: true,\r\n\t\tstatus:\r\n\t\t\t\"✅ Check out your transaction on Etherscan: https://etherscan.io/tx/\" +\r\n\t\t\ttxHash,\r\n\t\t};\r\n\t} catch (error) {\r\n\t\treturn {\r\n\t\tsuccess: false,\r\n\t\tstatus: \"😥 Something went wrong: \" + error.message,\r\n\t\t};\r\n\t}\r\n};\r\n","export default __webpack_public_path__ + \"static/media/promogif3.3ac004f2.gif\";","export default __webpack_public_path__ + \"static/media/tlc_logo_black.4c83e818.png\";","import './App.css';\r\nimport { useEffect, useState } from \"react\";\r\nimport {\r\n\tconnectWallet,\r\n\tgetCurrentWalletConnected,\r\n\tmint,\r\n} from \"./interact.js\";\r\nimport gif from './img/promogif3.gif';\r\nimport logo from './img/tlc_logo_black.png';\r\n\r\nrequire(\"dotenv\").config();\r\n\r\nconst App = () => {\r\n\tconst [walletAddress, setWallet] = useState(\"\");\r\n\tconst [status, setStatus] = useState(\"\");\r\n\r\n\tconst [mintAmount, setMintAmount] = useState(\"\");\r\n\r\n\tuseEffect(async () => {\r\n\tconst { address, status } = await getCurrentWalletConnected();\r\n\r\n\tsetWallet(address);\r\n\tsetStatus(status);\r\n\r\n\taddWalletListener();\r\n\t}, []);\r\n\r\n\tfunction addWalletListener() {\r\n\t\tif (window.ethereum) {\r\n\t\t\twindow.ethereum.on(\"accountsChanged\", (accounts) => {\r\n\t\t\tif (accounts.length > 0) {\r\n\t\t\t\tsetWallet(accounts[0]);\r\n\t\t\t\tsetStatus(\"Check that you are connected to the Ethereum Mainnet.\");\r\n\t\t\t} else {\r\n\t\t\t\tsetWallet(\"\");\r\n\t\t\t\tsetStatus(\"🦊 Connect to Metamask using the top right button.\");\r\n\t\t\t}\r\n\t\t\t});\r\n\t\t} else {\r\n\t\t\tsetStatus(\r\n\t\t\t<p>\r\n\t\t\t\t{\" \"}\r\n\t\t\t\t🦊{\" \"}\r\n\t\t\t\t<a target=\"_blank\" href={`https://metamask.io/download.html`}>\r\n\t\t\t\tYou must install Metamask, a virtual Ethereum wallet, in your\r\n\t\t\t\tbrowser.\r\n\t\t\t\t</a>\r\n\t\t\t</p>\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n\r\n\tconst connectWalletPressed = async () => {\r\n\t\tconst walletResponse = await connectWallet();\r\n\t\tsetStatus(walletResponse.status);\r\n\t\tsetWallet(walletResponse.address);\r\n\t};\r\n\r\n\tconst onMintPressed = async () => {\r\n\t\tconst { success, status } = await mint(mintAmount);\r\n\t\tsetStatus(status);\r\n\t\tif (success) {\r\n\t\t\tsetMintAmount(\"\");\r\n\t\t}\r\n\t};\r\n\r\n\treturn (\r\n\t\twalletAddress.length > 0 ?\r\n\t\t(\r\n\t\t\t<div className=\"Minter\">\r\n\t\t\t\t<button id=\"walletButton\">\r\n\t\t\t\t\t{\"Connected: \" + String(walletAddress).substring(0, 6) + \"...\" + String(walletAddress).substring(38)}\r\n\t\t\t\t</button>\r\n\t\t\t\t<img src={logo} width=\"75\" height=\"75\" />\r\n\t\t\t\t{\"Contract address: \" + String(process.env.REACT_APP_CONTRACT_ADDRESS).substring(0, 6) + \"...\" +\tString(process.env.REACT_APP_CONTRACT_ADDRESS).substring(38)}\r\n\r\n\t\t\t\t<h1 id=\"title\">MINT THE LEADING CREW NFT</h1>\r\n\t\t\t\t<img src={gif} alt=\"Logo\" width=\"400\" height=\"400\" />\r\n\t\t\t\t<form>\r\n\t\t\t\t\t<p>Each NFT cost 0.06 ETH (excluding gas fees). </p>\r\n\t\t\t\t\t<p>Enter the amount of NFTs you wish to mint and press \"Mint\".</p>\r\n\t\t\t\t\t<input\r\n\t\t\t\t\t\ttype=\"text\"\r\n\t\t\t\t\t\tplaceholder=\"Enter mint amount: 1 to 6 (Max)\"\r\n\t\t\t\t\t\tonChange={(event) => setMintAmount(event.target.value)}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</form>\r\n\r\n\t\t\t\t<button id=\"mintButton\" onClick={onMintPressed}>\r\n\t\t\t\t\tMint\r\n\t\t\t\t</button>\r\n\t\t\t\t<p id=\"status\" style={{ color: \"red\" }}> {status} </p>\r\n\t\t\t</div>\r\n\t\t) :\r\n\t\t(\r\n\t\t\t<div className=\"Minter\">\r\n\t\t\t\t<img src={logo} width=\"400\" height=\"400\" />\r\n\t\t\t\t<br></br>\r\n\t\t\t\t<button id=\"connectButton\" onClick={connectWalletPressed} height=\"70\">\r\n\t\t\t\t\t{<span>Connect Wallet</span>}\r\n\t\t\t\t</button>\r\n\t\t\t</div>\r\n\t\t)\r\n\t);\r\n};\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n\tif (onPerfEntry && onPerfEntry instanceof Function) {\r\n\t\timport('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n\t\tgetCLS(onPerfEntry);\r\n\t\tgetFID(onPerfEntry);\r\n\t\tgetFCP(onPerfEntry);\r\n\t\tgetLCP(onPerfEntry);\r\n\t\tgetTTFB(onPerfEntry);\r\n\t\t});\r\n\t}\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n<React.StrictMode>\r\n\t<App />\r\n</React.StrictMode>,\r\ndocument.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}