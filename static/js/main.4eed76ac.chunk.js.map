{"version":3,"sources":["interact.js","promogif3.gif","App.js","reportWebVitals.js","index.js"],"names":["require","config","contractAddress","process","contractABI","web3","createAlchemyWeb3","connectWallet","a","window","ethereum","request","method","addressArray","obj","status","address","message","target","href","getCurrentWalletConnected","length","mint","mintAmount","trim","success","eth","Contract","contract","transactionParameters","to","from","selectedAddress","value","Number","toString","data","methods","presaleMint","encodeABI","params","txHash","App","useState","walletAddress","setWallet","setStatus","setMintAmount","addWalletListener","on","accounts","useEffect","connectWalletPressed","walletResponse","onMintPressed","className","id","String","substring","src","gif","alt","width","height","type","placeholder","onChange","event","onClick","style","color","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4eed76ac.chunk.js","sourcesContent":["require(\"dotenv\").config();\r\n\r\nconst alchemyKey = process.env.REACT_APP_ALCHEMY_KEY;\r\nconst contractAddress = process.env.REACT_APP_CONTRACT_ADDRESS;\r\nconst contractABI = require(\"./contract-abi.json\");\r\nconst { createAlchemyWeb3 } = require(\"@alch/alchemy-web3\");\r\nconst web3 = createAlchemyWeb3(alchemyKey);\r\n\r\nexport const connectWallet = async () => {\r\n  if (window.ethereum) {\r\n    try {\r\n      const addressArray = await window.ethereum.request({\r\n        method: \"eth_requestAccounts\",\r\n      });\r\n      const obj = {\r\n        status: \"Check that you are connected to the Ethereum Mainnet.\",\r\n        address: addressArray[0],\r\n      };\r\n      return obj;\r\n    } catch (err) {\r\n      return {\r\n        address: \"\",\r\n        status: \"😥 \" + err.message,\r\n      };\r\n    }\r\n  } else {\r\n    return {\r\n      address: \"\",\r\n      status: (\r\n        <span>\r\n          <p>\r\n            {\" \"}\r\n            🦊{\" \"}\r\n            <a target=\"_blank\" href={`https://metamask.io/download.html`}>\r\n              You must install Metamask, a virtual Ethereum wallet, in your\r\n              browser.\r\n            </a>\r\n          </p>\r\n        </span>\r\n      ),\r\n    };\r\n  }\r\n};\r\n\r\nexport const getCurrentWalletConnected = async () => {\r\n  if (window.ethereum) {\r\n    try {\r\n      const addressArray = await window.ethereum.request({\r\n        method: \"eth_accounts\",\r\n      });\r\n      if (addressArray.length > 0) {\r\n        return {\r\n          address: addressArray[0],\r\n          status: \"Check that you are connected to the Ethereum Mainnet.\",\r\n        };\r\n      } else {\r\n        return {\r\n          address: \"\",\r\n          status: \"🦊 Connect to Metamask using the top right button.\",\r\n        };\r\n      }\r\n    } catch (err) {\r\n      return {\r\n        address: \"\",\r\n        status: \"😥 \" + err.message,\r\n      };\r\n    }\r\n  } else {\r\n    return {\r\n      address: \"\",\r\n      status: (\r\n        <span>\r\n          <p>\r\n            {\" \"}\r\n            🦊{\" \"}\r\n            <a target=\"_blank\" href={`https://metamask.io/download.html`}>\r\n              You must install Metamask, a virtual Ethereum wallet, in your\r\n              browser.\r\n            </a>\r\n          </p>\r\n        </span>\r\n      ),\r\n    };\r\n  }\r\n};\r\n\r\nexport const mint = async (mintAmount) => {\r\n\tif (mintAmount.trim() == \"\") {\r\n\t  return {\r\n\t\tsuccess: false,\r\n\t\tstatus: \"❗Please make sure all fields are completed before minting.\",\r\n\t  };\r\n\t}\r\n\tif (mintAmount > 6) {\r\n\t\treturn {\r\n\t\t  success: false,\r\n\t\t  status: \"You can only mint a maximum of 6 NFTs.\",\r\n\t\t};\r\n\t  }\r\n\r\n\twindow.contract = await new web3.eth.Contract(contractABI, contractAddress);\r\n\r\n\tconst transactionParameters = {\r\n\t  to: contractAddress, // Required except during contract publications.\r\n\t  from: window.ethereum.selectedAddress, // must match user's active address.\r\n\t  value: (Number(6e16)* mintAmount).toString(16),\r\n\t  data: window.contract.methods\r\n\t\t// .publicMint(mintAmount)\r\n\t\t.presaleMint(mintAmount)\r\n\t\t.encodeABI(),\r\n\t};\r\n\r\n  try {\r\n    const txHash = await window.ethereum.request({\r\n      method: \"eth_sendTransaction\",\r\n      params: [transactionParameters],\r\n    });\r\n    return {\r\n      success: true,\r\n      status:\r\n        \"✅ Check out your transaction on Etherscan: https://etherscan.io/tx/\" +\r\n        txHash,\r\n    };\r\n  } catch (error) {\r\n    return {\r\n      success: false,\r\n      status: \"😥 Something went wrong: \" + error.message,\r\n    };\r\n  }\r\n};\r\n","export default __webpack_public_path__ + \"static/media/promogif3.3ac004f2.gif\";","import './App.css';\r\nimport { useEffect, useState } from \"react\";\r\nimport {\r\n\tconnectWallet,\r\n\tgetCurrentWalletConnected,\r\n\tmint,\r\n} from \"./interact.js\";\r\nimport gif from './promogif3.gif';\r\n\r\nrequire(\"dotenv\").config();\r\n\r\nconst App = () => {\r\n\tconst [walletAddress, setWallet] = useState(\"\");\r\n\tconst [status, setStatus] = useState(\"\");\r\n\r\n\tconst [mintAmount, setMintAmount] = useState(\"\");\r\n\r\n\tuseEffect(async () => {\r\n\t  const { address, status } = await getCurrentWalletConnected();\r\n\r\n\t  setWallet(address);\r\n\t  setStatus(status);\r\n\r\n\t  addWalletListener();\r\n\t}, []);\r\n\r\n\tfunction addWalletListener() {\r\n\t  if (window.ethereum) {\r\n\t\twindow.ethereum.on(\"accountsChanged\", (accounts) => {\r\n\t\t  if (accounts.length > 0) {\r\n\t\t\tsetWallet(accounts[0]);\r\n\t\t\tsetStatus(\"Check that you are connected to the Ethereum Mainnet.\");\r\n\t\t  } else {\r\n\t\t\tsetWallet(\"\");\r\n\t\t\tsetStatus(\"🦊 Connect to Metamask using the top right button.\");\r\n\t\t  }\r\n\t\t});\r\n\t  } else {\r\n\t\tsetStatus(\r\n\t\t  <p>\r\n\t\t\t{\" \"}\r\n\t\t\t🦊{\" \"}\r\n\t\t\t<a target=\"_blank\" href={`https://metamask.io/download.html`}>\r\n\t\t\t  You must install Metamask, a virtual Ethereum wallet, in your\r\n\t\t\t  browser.\r\n\t\t\t</a>\r\n\t\t  </p>\r\n\t\t);\r\n\t  }\r\n\t}\r\n\r\n\tconst connectWalletPressed = async () => {\r\n\t  const walletResponse = await connectWallet();\r\n\t  setStatus(walletResponse.status);\r\n\t  setWallet(walletResponse.address);\r\n\t};\r\n\r\n\tconst onMintPressed = async () => {\r\n\t  const { success, status } = await mint(mintAmount);\r\n\t  setStatus(status);\r\n\t  if (success) {\r\n\t\tsetMintAmount(\"\");\r\n\t  }\r\n\t};\r\n\r\n\treturn (\r\n\t\twalletAddress.length > 0\r\n\t\t?\r\n\t\t(\r\n\t\t<div className=\"Minter\">\r\n\t\t<button id=\"walletButton\">\r\n\t\t{\r\n\t\t\"Connected: \" +\r\n\t\t  String(walletAddress).substring(0, 6) +\r\n\t\t  \"...\" +\r\n\t\t  String(walletAddress).substring(38)\r\n\t\t}\r\n\t  \t</button>\r\n\t\t{\"Contract address: \" + String(process.env.REACT_APP_CONTRACT_ADDRESS).substring(0, 6) + \"...\" +\tString(process.env.REACT_APP_CONTRACT_ADDRESS).substring(38)}\r\n\r\n\t\t<h1 id=\"title\">Mint TheLeadingCrew NFT</h1>\r\n\t\t<img src={gif} alt=\"Logo\" width=\"400\" height=\"400\" />\r\n\r\n\t\t<form>\r\n\t\t<p>Enter the amount of NFTs you wish to mint and press \"Mint\"</p>\r\n\t\t<p>Each NFT cost 0.06 ETH </p>\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Enter mint amount: 1 to 6 (Max)\"\r\n          onChange={(event) => setMintAmount(event.target.value)}\r\n        />\r\n      </form>\r\n\r\n\t\t<button id=\"mintButton\" onClick={onMintPressed}>\r\n\t\t\tMint\r\n\t\t</button>\r\n\t\t<p id=\"status\" style={{ color: \"red\" }}>\r\n\t\t  {status}\r\n\t\t</p>\r\n\t  </div>\r\n\t\t)\r\n\t\t:\r\n\t\t(\r\n\t\t<div className=\"Minter\">\r\n\t\t<button id=\"connectButton\" onClick={connectWalletPressed}>\r\n\t\t  {<span>Connect Wallet</span>}\r\n\t\t</button>\r\n\r\n\t\t<br></br>\r\n\t\t{\"Contract address: \" + String(process.env.REACT_APP_CONTRACT_ADDRESS).substring(0, 6) + \"...\" +\tString(process.env.REACT_APP_CONTRACT_ADDRESS).substring(38)}\r\n\r\n\t\t<h1 id=\"title\">The Leading Crew NFT Minter</h1>\r\n\t\t<img src={gif} alt=\"Logo\" width=\"400\" height=\"400\" />\r\n\t\t</div>\r\n\t\t)\r\n\t);\r\n  };\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}